import { Device } from '@payment-widget/models';
import { BrandpayPaymentParams } from './brandpayPaymentParams';
interface Options {
    device: Device;
    redirectUrl?: string;
}
export declare class BrandpayDriver {
    private paymentWidgetClientKey;
    customerKey: string | null;
    private brandpay;
    private widget;
    status: 'NONE' | 'PENDING' | 'DONE' | 'NOT_USED';
    redirectUrl?: string;
    clientKey?: string;
    private device;
    constructor(paymentWidgetClientKey: string, customerKey: string | null, options: Options);
    ready(): Promise<void>;
    waitForBrandpay: () => Promise<this | null>;
    connectBridge: (iframe: HTMLIFrameElement, amount: number) => void;
    dispose: () => void;
    requestPayment: (paymentParams: BrandpayPaymentParams) => Promise<never>;
    getRequestPaymentParams: (paymentParams: BrandpayPaymentParams) => {
        methodId?: import("@tosspayments/brandpay-types").MethodId | undefined;
        cardInstallmentPlan?: number | undefined;
        useCardPoint?: boolean | undefined;
        discountCode?: string | undefined;
        cashReceipt?: import("@tosspayments/brandpay-types").현금영수증 | undefined;
        amount: number | undefined;
        successUrl: string;
        failUrl: string;
        orderName: string;
        orderId: string;
        customerEmail?: string | undefined;
        taxFreeAmount?: number | undefined;
    };
    private getOptions;
    updateAmount: (amount: number) => void;
    openSettings: () => Promise<void>;
    get options(): {
        clientKey: string;
        customerKey: string;
        redirectUrl: string | undefined;
    };
}
export {};
